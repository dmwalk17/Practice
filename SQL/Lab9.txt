Donna Walker
CSIT 2520

--Lab 9 SQL
SQL> set serveroutput on
--1a. 
--procedure using implicit cursor to check loan request amount against credit limit for customer in demo_customer

create or replace PROCEDURE check_available_credit
(
  customer_id_param  in number,   
  purchase_amount_param in number
)
AS
--declaration of implicit cursor
climit demo_customer.creditlimit%type;
BEGIN
--sets implicit cursor
  SELECT creditlimit INTO climit
  FROM dwalker1.demo_customer
  WHERE custid = customer_id_param;

--tests implicit cursor against parameter amount and displays approval/denial
  IF (climit >= purchase_amount_param) THEN
    dbms_output.put_line ('Credit approved for Customer ' || customer_id_param);
  ELSE
    dbms_output.put_line ('Credit denied for Customer ' || customer_id_param);
  END IF;  
END CHECK_AVAILABLE_CREDIT;

--Calls for 1a
--valid customer request above limit

SQL> CALL check_available_credit(100, 6000);

Call completed.

Credit denied for Customer 100


--valid customer request below limit
SQL> CALL check_available_credit(101, 4000);

Call completed.

Credit approved for Customer 101


--valid customer request below limit
SQL> CALL check_available_credit(105, 5000);

Call completed.

Credit approved for Customer 105


--valid customer request below limit
SQL> CALL check_available_credit(106, 5000);

Call completed.

Credit approved for Customer 106


--valid customer request above limit
SQL> CALL check_available_credit(107, 11000);

Call completed.

Credit denied for Customer 107


--1b
--procedure takes two parameters of customer and id. Like 1a but has exception handling
create or replace PROCEDURE check_available_credit2
(
  customer_id_param  in number,   
  purchase_amount_param in number
)
AS
--declaration of implied cursor
climit demo_customer.creditlimit%type;
BEGIN
--definition of implied cursor
  SELECT creditlimit INTO climit
  FROM dwalker1.demo_customer
  WHERE custid = customer_id_param;
  --conditional to display approval or disapproval of loan
  IF (climit >= purchase_amount_param) THEN
    dbms_output.put_line ('Credit approved for Customer ' || customer_id_param);
  ELSE
    dbms_output.put_line ('Credit denied for Customer ' || customer_id_param);
  END IF;  
  --adds exception block to 1a code for no_data_found and others block
  --commented out no_data_found exception to make others block work
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    dbms_output.put_line ('Customer ID is not valid');
  WHEN OTHERS THEN
    dbms_output.put_line ('Invalid request.');
  
END CHECK_AVAILABLE_CREDIT2;


-- testing invalid customer number 
SQL> CALL check_available_credit2(109, 5000);

Call completed.

Customer ID is not valid

--valid customer below limit
SQL> CALL check_available_credit2(100,1000);

Call completed.

Credit approved for Customer 100

--to test Others exception handling I couldn't come up with anything else that worked
--so I commented out the data not found and tried to catch it with the others exception 
--all other attempts tended to crash the program and not compile


--invalid customer with no_data_found commented out
> CALL check_available_credit2(109, 5000)
check_available_credit2 109 succeeded.
Invalid request.


--2

--procedure takes in product code, checks more_products table to see 
--if product is available and displays status to user
create or replace PROCEDURE check_product_available
(
  product_id_param  in number   
)
AS
--declares variable for implied cursor
inStock more_products.available%type;
BEGIN
--implicit cursor takes in char of 'Y' or 'N' from more_products to reflect availability
  SELECT available INTO inStock
  FROM dwalker1.more_products
  WHERE prd_id = product_id_param;
  IF (UPPER(inStock) = 'Y') THEN
    dbms_output.put_line ('Product #' || product_id_param || ' is available');
  ELSIF (UPPER(inStock) = 'N') THEN
    dbms_output.put_line ('Product #' || product_id_param || ' is not available');
  ELSE
    dbms_output.put_line ('Invalid table data.');
  END IF;  
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    dbms_output.put_line ('Product ID is not valid');
  WHEN OTHERS THEN
    dbms_output.put_line ('Invalid request.');
  
END CHECK_PRODUCT_AVAILABLE;

--accidentally put the wrong field name in the where clause, but the exception caught it
check_product_available 1) succeeded.
Product ID is not valid

--Opps, needed to realign output
check_product_available 1) succeeded.
Product # 1is available

--better, successfully tests available
check_product_available 1) succeeded.
Product #1 is available

--turned echo on to get command as well as output
--also using Dbms output but this gives more info
--successfully tests exception handling for NO_DATA_FOUND
> CALL check_product_available(6)
check_product_available 6) succeeded.
Product ID is not valid

--tested not available
> CALL check_product_available(3)
check_product_available 3) succeeded.
Product #3 is not available

--commented out NO_DATA_FOUND to successfully test OTHERS functionality
> CALL check_product_available(6)
check_product_available 6) succeeded.
Invalid request.


--3
--Function takes in a percentage and employee_id parameter and returns to new proposed salary

create or replace FUNCTION salary_increase
(
   percentage_param  in NUMBER,
   employee_id_param  in more_employees.employee_id%type
)
--declares return variable 
RETURN NUMBER
AS 
  proposed_salary  more_employees.salary%type;
BEGIN
--implied cursor to get current salary to tabulate proposed salary
  SELECT salary
  INTO proposed_salary
  FROM more_employees
  WHERE employee_id = employee_id_param;
  
   --uses current salary and percentage to tabulate proposed salary 
  proposed_salary := proposed_salary + (proposed_salary * (percentage_param/100));

  --returns proposed salary
  RETURN proposed_salary;
  
EXCEPTION
  -- If the description is NOT found, displays invalid employee and returns 0
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Invalid employee id');
    RETURN 0;
END SALARY_INCREASE;


--Output 1
SQL> DECLARE
  increase_percent number := 10;
  empid NUMBER := 1; -- pick an employee ID to test the function
BEGIN
-- display the output of the function
  DBMS_OUTPUT.PUT_LINE('The new proposed salary for employee ' || empid || ' is: ' 
                       || ROUND(salary_increase(increase_percent, empid)) );
END;
/
--current salary was 800000
PL/SQL procedure successfully completed.

The new proposed salary for employee 1 is: 880000 

-- 2nd Attempt
--added currency formatting (L($) & G(,)) and used FM to get rid of leading spaces that were generating
SQL> DECLARE
  increase_percent number := 10;
  empid NUMBER := 1; -- pick an employee ID to test the function
BEGIN
-- display the output of the function, round to 2 decimal places
  DBMS_OUTPUT.PUT_LINE('The new proposed salary for employee ' || empid || ' is: ' 
                       || to_char(salary_increase(increase_percent, empid), 'FML999G999') );
END;
/

PL/SQL procedure successfully completed.

The new proposed salary for employee 1 is: $880,000

--3rd try
--invalid employee id
--made change to exception to print helpful comment before returning zero
SQL> DECLARE
  increase_percent number := 15;
  empid NUMBER := 14; -- pick an employee ID to test the function
BEGIN
-- display the output of the function, round to 2 decimal places
  DBMS_OUTPUT.PUT_LINE('The new proposed salary for employee ' || empid || ' is: ' 
                       || to_char(salary_increase(increase_percent, empid), 'FML999G999') );
END;
/

PL/SQL procedure successfully completed.

Invalid employee id
The new proposed salary for employee 14 is: $0

--#4 final code below after all four runs

--Procedure that takes in a division number and produces a list of employees from that division
--Displays prescribed employee information if employees exist in that division
create or replace PROCEDURE employee_list
(
  division_id_param in employees2.division_id%type
)
  AS
  --declare cursor, rowtype variable and counter 
  --used decode for job_id and division_id fields to spell out 
    CURSOR emp_data 
     IS SELECT (first_name || ' ' || last_name) as Name,decode(job_id, 'PRE','President', 'MGR','Manager', 'WOR','Worker','TEC','Technician','Employee') job,  salary, decode(division_id,'BUS','Business','SAL','Sales','SUP','Superior','OPE','Operations','Unexistent') div
      from dwalker1.employees2
      where division_id = UPPER(division_id_param)
      order by employees2.last_name, employees2.first_name;
    emp_rec emp_data%ROWTYPE;
    counter number;
BEGIN
--instantiate counter
   counter := 0;
   Open emp_data;
    LOOP
      fetch emp_data into emp_rec;
      EXIT WHEN emp_data%NOTFOUND;
      --displays employee full name, job_id, division name, and salary (formatted).
      dbms_output.put_line ('Employee ' || emp_rec.Name || ' is a ' || emp_rec.job || ' for ' || emp_rec.div || ' division who makes ' || to_char(emp_rec.salary, 'FML999G999') || ' per year.');
      counter := counter + 1;
    END LOOP;
    --If no data matched the division criteria displays a message that employees in that division were not found
    IF (counter < 1) THEN
       DBMS_OUTPUT.PUT_LINE('Employees for division ' || division_id_param || ' not found. ');
    END IF;    
   CLOSE emp_data;
   EXCEPTION
    --Took out DATA_NOT_FOUND exception because it wasn't really doing anything
     WHEN OTHERS THEN
       dbms_output.put_line ('Operation Terminated With Malice');
     
END EMPLOYEE_LIST;

--operates even if called with lower case letters
> CALL employee_list('sal')
employee_list 'SAL') succeeded.
Employee Christine Brown is a Manager for Sales division who makes $247,000 per year.
Employee John Brown is a Manager for Sales division who makes $249,000 per year.
Employee Jack Ewing is a Manager for Sales division who makes $235,000 per year.
Employee Gerald Gold is a Manager for Sales division who makes $245,000 per year.
Employee Rob Green is a Worker for Sales division who makes $350,000 per year.
Employee Steve Green is a Manager for Sales division who makes $275,000 per year.
Employee Fred Hobbs is a Worker for Sales division who makes $140,000 per year.
Employee Terry Iron is a Manager for Sales division who makes $225,000 per year.
Employee Ron Johnson is a Manager for Sales division who makes $350,000 per year.
Employee Eileen Lane is a Manager for Sales division who makes $235,000 per year.
Employee Paul Owens is a Manager for Sales division who makes $245,000 per year.
Employee Roy Red is a Manager for Sales division who makes $375,000 per year.
Employee Gail Silver is a Manager for Sales division who makes $225,000 per year.
Employee Sandra Smith is a Manager for Sales division who makes $335,000 per year.
Employee Kelvin Trenton is a Manager for Sales division who makes $255,000 per year.
Employee Doreen Upton is a Manager for Sales division who makes $235,000 per year.
Employee Sarah White is a Manager for Sales division who makes $235,000 per year.
Employee Tracy Yellow is a Manager for Sales division who makes $225,000 per year.
Employee Melanie York is a Manager for Sales division who makes $255,000 per year.
  
> CALL employee_list('bus')
employee_list 'BUS') succeeded.
Employee Tanya Conway is a Manager for Business division who makes $200,000 per year.
Employee Damon Jones is a Worker for Business division who makes $280,000 per year.
Employee Jill Jones is a Manager for Business division who makes $175,000 per year.
Employee James Smith is a President for Business division who makes $800,000 per year.
Employee Mark Smith is a Manager for Business division who makes $155,000 per year.

--search for nonexistent division
SQL> CALL employee_list('DEX');

Call completed.

Employees for division DEX not found. 
 
 


--5 


--Procedure uses explicit cursor to display a customer's charter information given the customer's code
create or replace PROCEDURE charter_members
(
  cus_code_param in avia_customer.cus_code%type
)
 AS
 --concatenates first, initial and last name into full name
 --Uses field alias to assist with display
 CURSOR avia_cus 
 IS SELECT cus_code, (cust.cus_fname || ' ' || cust.cus_initial || ' ' || cust.cus_lname) as FullName, cha.char_date as CharterDate,cha.char_destination as Destination, cha.char_distance as Distance, cha.char_fuel_gallons as FuelInGallons, (cha.char_distance/cha.char_fuel_gallons) as MPG 
 FROM avia_customer cust left outer join charter cha
  using (cus_code)
 WHERE cus_code = cus_code_param
 order by cha.char_date, cha.char_destination;
 customer avia_cus%rowtype;
 counter number;

 
 BEGIN
 counter := 0;
 total_miles number := 0;
 OPEN avia_cus;
 LOOP
   FETCH avia_cus into customer;
   EXIT WHEN avia_cus%NOTFOUND;
   --Utilizes rowtype variable as reference and loop to display each pertinent row of charter information for a given customer
   DBMS_OUTPUT.PUT_LINE('Customer # ' || customer.cus_code || ' Name: ' || customer.FullName || ' Charter Date: ' || customer.CharterDate ||' Destination: ' || customer.Destination || ' Distance: ' || customer.Distance || ' Fuel Used: ' || customer.FuelInGallons || ' MPG: ' || round(customer.MPG,2)); 
   counter := counter + 1;
   total_miles += customer.Distance;
 END LOOP;
 --Uses counter to handle non-existent customer code or customers that have not booked a charter 
 IF (counter < 1) THEN
   DBMS_OUTPUT.PUT_LINE('Customer not found with id #: ' || cus_code_param);
   ELSIF (counter = 1 AND customer.Destination is null) THEN
     SYS.DBMS_OUTPUT.PUT_LINE('Customer did not book any charters yet');
   ELSE
     DBMS_OUTPUT.PUT_LINE('Customer #' || customer.cus_code || ' flew a total of ' || total_miles);   
 END IF;    
 CLOSE avia_cus;    
 EXCEPTION
  WHEN NO_DATA_FOUND THEN
    dbms_output.put_line ('Customer ID is not valid');
  WHEN OTHERS THEN
    dbms_output.put_line ('Invalid request.');
END CHARTER_MEMBERS;

--multiple charter
> CALL charter_members(10017)
charter_members 10017) succeeded.
Customer #10017 Name: George  Williams Charter Date: 06-FEB-13 Destination: STL Distance: 472 Fuel Used: 117.1 MPG: 4.03
Customer #10017 Name: George  Williams Charter Date: 07-FEB-13 Destination: GNV Distance: 1574 Fuel Used: 459.9 MPG: 3.42
Customer #10017 Name: George  Williams Charter Date: 09-FEB-13 Destination: ATL Distance: 936 Fuel Used: 302.6 MPG: 3.09
Customer #10017 Name: George  Williams Charter Date: 10-FEB-13 Destination: TYS Distance: 644 Fuel Used: 167.4 MPG: 3.85
Customer #10017 flew a total of 3626 miles.



--One Charter
> CALL charter_members(10010)
charter_members 10010) succeeded.
Customer #10010 Name: Alfred A Ramas Charter Date: 08-FEB-13 Destination: MOB Distance: 884 Fuel Used: 215.1 MPG: 4.11
Customer #10010 flew a total of 884 miles.


--Nonexistant customer
--SQL> CALL charter_members(99999);

Call completed.

Customer not found with id #: 99999



--Customer that has not booked a charter
> CALL charter_members(10013)
charter_members 10013) succeeded.
Customer # 10013 Name: Paul F Olowski Charter Date:  Destination:  Distance:  Fuel Used:  MPG: 
Customer did not book any charters yet
